// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file test/test.proto (package test, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message test.DoTestRequest
 */
export class DoTestRequest extends Message<DoTestRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DoTestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "test.DoTestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoTestRequest {
    return new DoTestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoTestRequest {
    return new DoTestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoTestRequest {
    return new DoTestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DoTestRequest | PlainMessage<DoTestRequest> | undefined, b: DoTestRequest | PlainMessage<DoTestRequest> | undefined): boolean {
    return proto3.util.equals(DoTestRequest, a, b);
  }
}

/**
 * @generated from message test.DoTestResponse
 */
export class DoTestResponse extends Message<DoTestResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DoTestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "test.DoTestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoTestResponse {
    return new DoTestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoTestResponse {
    return new DoTestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoTestResponse {
    return new DoTestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DoTestResponse | PlainMessage<DoTestResponse> | undefined, b: DoTestResponse | PlainMessage<DoTestResponse> | undefined): boolean {
    return proto3.util.equals(DoTestResponse, a, b);
  }
}

